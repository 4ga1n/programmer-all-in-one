version: '3'
services:
  programmer-all-in-one:
    build:
      context: ./
      dockerfile: Dockerfile
    # ports:
    #   - 81:80
    restart: unless-stopped
    container_name: programmer-all-in-one
    command: /bin/sh -c "while sleep 1000; do :; done"
  db:
    image : mysql:latest
    # ports:
    #   - "3306:3306"
    volumes:
      - ./db:/var/lib/mysql
      # - ../sql/init_local.sql:/docker-entrypoint-initdb.d/init.sql
      # - ./config.cnf:/etc/mysql/conf.d/config.cnf
      # - ./init-dump:/docker-entrypoint-initdb.d
    environment:
      MYSQL_USER: counter
      MYSQL_PASSWORD: counter1123
      MYSQL_DATABASE: counter
      MYSQL_ROOT_PASSWORD: root
      # TERM: xterm
      # APP_ENV: dev
    # container_name: mysql
  # mock-server:
  #   image: mockoon/cli:latest
  #   command: ["--data", "/data/demo.json", "--port", "3000"]
  #   # healthcheck:
  #   #   test: ["CMD-SHELL", "curl -f http://localhost:3000/your-healthcheck-route || exit 1"]
  #   #   interval: 30s
  #   #   timeout: 5s
  #   #   retries: 2
  #   #   start_period: 10s
  #   volumes:
  #     - ./demo.json:/data/demo.json:readonly
  # gitlab:
  #   image: 'zengxs/gitlab:latest'
  #   restart: always
  #   hostname: 'gitlab.example.com'
  #   environment:
  #     GITLAB_OMNIBUS_CONFIG: |
  #       external_url 'http://gitlab.example.com'
  #       # Add any other gitlab.rb configuration here, each on its own line
  #   ports:
  #     - '80:80'
  #     - '443:443'
  #     - '2222:22'
  #   volumes:
  #     - ./gitlab/config:/etc/gitlab'
  #     - ./gitlab/logs:/var/log/gitlab'
  #     - ./gitlab/data:/var/opt/gitlab'
  #   shm_size: '256m'
# volumes:
#   db:
#     driver: local
    # cap_add:
    #   - SYS_NICE
    # environment:
    #   FLASK_DEBUG: "true"
    # Runs app on the same network as the service container, allows "forwardPorts" in devcontainer.json function.
    # network_mode: service:another-service
    # Use "forwardPorts" in **devcontainer.json** to forward an app port locally.
    # (Adding the "ports" property to this file will not forward from a Codespace.)

    # Uncomment the next line to use a non-root user for all processes - See https://aka.ms/vscode-remote/containers/non-root for details.
    # user: vscode

    # Uncomment the next four lines if you will use a ptrace-based debugger like C++, Go, and Rust.
    # cap_add:
    #   - SYS_PTRACE
    # security_opt:
    #   - seccomp:unconfined
  # You can include other services not opened by VS Code as well
  # another-service:
  #   image: mysql:latest
  #   restart: unless-stopped
  #   # As in the "app" service, use "forwardPorts" in **devcontainer.json** to forward an app port locally.
  # zookeeper:
  #   restart: always
  #   image: docker.io/bitnami/zookeeper:3.8
  #   ports:
  #     - "2181:2181"
  #   # volumes:
  #   #   - "zookeeper-volume:/bitnami"
  #   environment:
  #     - ALLOW_ANONYMOUS_LOGIN=yes
  # kafka:
  #   restart: always
  #   image: docker.io/bitnami/kafka:3.3
  #   ports:
  #     - "9093:9093"
  #   # volumes:
  #   #   - "kafka-volume:/bitnami"
  #   environment:
  #     - KAFKA_BROKER_ID=1
  #     - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
  #     - ALLOW_PLAINTEXT_LISTENER=yes
  #     - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:P∏LAINTEXT
  #     - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
  #     - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
  #   depends_on:
  #     - zookeeper
  # volumes:
  #   kafka-volume:
  #   zookeeper-volume:
  # zoo1:
  #   image: confluentinc/cp-zookeeper:7.3.2
  #   hostname: zoo1
  #   container_name: zoo1
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_SERVER_ID: 1
  #     ZOOKEEPER_SERVERS: zoo1:2888:3888
  # kafka1:
  #   image: confluentinc/cp-kafka:7.3.2
  #   hostname: kafka1
  #   container_name: kafka1
  #   ports:
  #     - "9092:9092"
  #     - "29092:29092"
  #   environment:
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://kafka1:9092,DOCKER://host.docker.internal:29092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #     KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
  #     KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
  #     KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
  #   depends_on:
  #     - zoo1
  # kafka2:
  #   image: confluentinc/cp-kafka:7.3.2
  #   hostname: kafka2
  #   container_name: kafka2
  #   ports:
  #     - "9093:9093"
  #     - "29093:29093"
  #   environment:
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:19093,EXTERNAL://kafka2:9093,DOCKER://host.docker.internal:29093
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #     KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
  #     KAFKA_BROKER_ID: 2
  #     KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
  #     KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
  #     KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
  #   depends_on:
  #     - zoo1
  # kafka3:
  #   image: confluentinc/cp-kafka:7.3.2
  #   hostname: kafka3
  #   container_name: kafka3
  #   ports:
  #     - "9094:9094"
  #     - "29094:29094"
  #   environment:
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:19094,EXTERNAL://kafka3:9094,DOCKER://host.docker.internal:29094
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #     KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
  #     KAFKA_BROKER_ID: 3
  #     KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
  #     KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
  #     KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
  #   depends_on:
  #     - zoo1
  # redis:
  #   image: redis:latest
  #   restart: always
  #   ports:
  #     - "6379:6379"
  # redisinsight:
  #   image: redislabs/redisinsight:latest
  #   ports:
  #     - '8001:8001'
  # cmak:
  #   image: ghcr.io/eshepelyuk/dckr/cmak-3.0.0.5:latest
  #   restart: always
  #   ports:
  #     - "9000:9000"
  #   environment:
  #     ZK_HOSTS: "zoo1:2181"
    # volumes:
    #   - /path/to/local/dаta:/root/redis
    #   - /path/to/local/redis.conf:/usr/local/etc/redis/redis.conf
    # environment:
    #   - REDIS_PASSWORD=my-password
    #   - REDIS_PORT=6379
    #   - REDIS_DATABASES=16